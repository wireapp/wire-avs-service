apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "sftd.fullname" . }}
  labels:
    {{- include "sftd.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  # Allows sfts to start up and shut down in parallel when scaling up and down.
  # However this does not affect upgrades.
  podManagementPolicy: Parallel
  serviceName: {{ include "sftd.fullname" . }}
  selector:
    matchLabels:
      {{- include "sftd.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- if or .Values.sftTokenSecret .Values.multiSFT.secret }}
        checksum/secret: {{ include (print .Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- end }}
        {{- if or .Values.tls.issuerRef (and .Values.tls.key .Values.tls.crt) }}
        checksum/secret-or-certificate: {{ include (print .Template.BasePath "/secret-or-certificate.yaml") . | sha256sum }}
        {{- end }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "sftd.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccountName: {{ include "sftd.fullname" . }}
      volumes:
        {{- if or .Values.sftTokenSecret .Values.multiSFT.secret }}
        - name: sft-secret
          secret:
            secretName: {{ include "sftd.fullname" . }}-secret
        {{- end }}
        - name: external-ip
          emptyDir: {}
      {{- if .Values.multiSFT.enabled }}
        {{- if .Values.multiSFT.discoveryRequired }}
        - name: multi-sft-config
          emptyDir: {}
        {{- end }}
      {{- end }}
      initContainers:
        - name: get-external-ip
          image: bitnamilegacy/kubectl:1.29.11
          volumeMounts:
            - name: external-ip
              mountPath: /external-ip
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            - /bin/sh
            - -c
            - |
              set -e
              max_tries=30
              count=0

              while [ "$count" -lt "$max_tries" ]; do
                # In the cloud, this setting is available to indicate the true IP address
                addr=$(kubectl get node $NODE_NAME -ojsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}')
                
                # On on-prem we allow people to set "wire.com/external-ip" to be used if no ExternalIP is detected
                if [ -z "$addr" ]; then
                  addr=$(kubectl get node $NODE_NAME -ojsonpath='{.metadata.annotations.wire\.com/external-ip}')
                fi

                if [ -n "$addr" ]; then
                  echo -n "$addr" | tee /dev/stderr > /external-ip/ip
                  break
                fi

                count=$((count + 1))
                echo "Waiting for external IP... ($count/$max_tries)"
                sleep 10
              done

              if [ -z "$addr" ]; then
                echo "Error: No external IP found after $max_tries attempts." >&2
                exit 1
              fi

        {{- if and .Values.multiSFT.enabled .Values.multiSFT.discoveryRequired }}
        - name: get-multi-sft-config
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"

          volumeMounts:
            - name: multi-sft-config
              mountPath: /multi-sft-config

          command:
            - /bin/sh
            - -c
            - |
              set -e


              response=$(curl "{{ .Values.multiSFT.turnDiscoveryURL }}")
              if [ -z "$response" ]; then
                 echo "No response from restund server."
                 exit 1
              fi

              echo "$response" | jq -r '.username' > /multi-sft-config/username
              if [ ! -s /multi-sft-config/username ]; then
                echo "Response does not contain a username"
                exit 1
              fi

              echo "$response" | jq -r '.password' > /multi-sft-config/password
              if [ ! -s /multi-sft-config/password ]; then
                echo "Response does not contain a password"
                exit 1
              fi

              echo "$response" | jq -r '.uris[0]' > /multi-sft-config/turn_server
              if [ ! -s /multi-sft-config/turn_server ]; then
                echo "Response does not contain a turn server"
                exit 1
              fi
        {{- end }}

      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            {{- if or .Values.sftTokenSecret .Values.multiSFT.secret }}
            - name: sft-secret
              mountPath: /secrets
            {{- end }}
            - name: external-ip
              mountPath: /external-ip
            {{- if .Values.multiSFT.enabled }}
            {{- if .Values.multiSFT.discoveryRequired }}
            - name: multi-sft-config
              mountPath: /multi-sft-config
            {{- end }}
            {{- end }}
            {{- if .Values.coredumps.enabled }}
            - name: coredumps
              mountPath: /var/coredumps
            {{- end }}

          command:
            - /usr/bin/dumb-init
          args:
            - --verbose
            - /bin/sh
            - -c
            - |
              set -e
              EXTERNAL_IP=$(cat /external-ip/ip)
              if [ -z "${EXTERNAL_IP}" ]; then
                ACCESS_ARGS=
              else
                ACCESS_ARGS="-A ${EXTERNAL_IP}"
              fi

              MULTI_SFT_ARGS=""

              {{- if .Values.multiSFT.enabled }}
              {{- if .Values.multiSFT.discoveryRequired }}
              MULTI_SFT_ARGS="-t $(cat /multi-sft-config/turn_server) \
              -x $(cat /multi-sft-config/username) \
              -c $(cat /multi-sft-config/password)"
              {{- else }}
              MULTI_SFT_ARGS="-t {{ required "must specify TURN server URI" .Values.multiSFT.turnServerURI }} \
              -s /secrets/zrest_secret.txt"
              {{- end }}
              {{- end }}

              AUTH_SFT_ARGS=""

              {{- if and (not .Values.multiSFT.enabled) .Values.sftTokenSecret }}
              AUTH_SFT_ARGS="-s /secrets/sftTokenSecret.txt -a"
              {{- end }}

              {{- if .Values.coredumps.enabled }}
              ulimit -c unlimited
              {{- end }}

              exec sftd \
                      -I "${POD_IP}" \
                      -M "${POD_IP}" \
                      ${ACCESS_ARGS} \
                      ${MULTI_SFT_ARGS} \
                      {{ if .Values.turnDiscoveryEnabled }}-T{{ end }} \
                      -u "https://{{ required "must specify host" .Values.host }}/sfts/${POD_NAME}" \
                      {{ .Values.additionalCmdArgs }} \
                      ${AUTH_SFT_ARGS}
          ports:
            - name: sft
              containerPort: 8585
              protocol: TCP
            - name: metrics
              containerPort: 49090
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

  {{- if .Values.coredumps.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: coredumps
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ required "coredumps.storageClassName is required if coredumps.enabled" .Values.coredumps.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.coredumps.storageSize  }}
  {{- end }}
